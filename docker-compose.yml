version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '${DB_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gazette-network
    healthcheck:
      test: [CMD-SHELL, 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    env_file:
      - .env # Charge le .env racine
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      NODE_ENV: ${NODE_ENV}
      PORT: ${BACKEND_PORT}
      JWT_SECRET: ${JWT_SECRET}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:${FRONTEND_PORT:-3002},http://frontend:${FRONTEND_PORT:-3002}}
    ports:
      - '${BACKEND_PORT}:${BACKEND_PORT}'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gazette-network

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:${BACKEND_PORT}
      NODE_ENV: development
      PORT: ${FRONTEND_PORT:-3002}
      NEXT_TELEMETRY_DISABLED: 1
      WATCHPACK_POLLING: 1
      CHOKIDAR_USEPOLLING: 1 
      # Variables pour optimiser Next.js
      NODE_OPTIONS: --max-old-space-size=2048
    ports:
      - '${FRONTEND_PORT:-3002}:${FRONTEND_PORT:-3002}'
    depends_on:
      - backend
    networks:
      - gazette-network
    restart: unless-stopped # red√©marrage auto

networks:
  gazette-network:
    driver: bridge

volumes:
  postgres_data:
